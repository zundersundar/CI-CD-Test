name: Tower-Watch CI/CD Pipeline

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - main

jobs:
  sanity-check:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # Frontend Analysis
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install frontend dependencies
        run:  npm install

      - name: Run ESLint
        run:  npx eslint . --ext .js,.jsx || true

      - name: Run frontend tests
        run:  npm test -- --coverage --watchAll=false || true

      # Backend Analysis
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.12'

      - name: Install backend dependencies
        run: |  
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r dev-requirements.txt

      - name: Run Flake8
        run:  flake8 .  --exclude=sample_data_pub/,unit_test || true


      - name: Run Bandit Security Scan
        run:  bandit -r . --exclude=sample_data_pub,unit_test || true

      - name: Run Single Unit Test File
        run: |
          python -m unittest unit_test/heimdall_tools_test.py || true

     # - name: Run backend tests
    #    run:  pytest --cov=.  --ignore=sample_data_pub, --ignore=unit_test || true


  deploy:
    runs-on: ubuntu-latest
    needs: sanity-check
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        
      #- name: Start SSH agent and add key
      #  run: |
      #    eval "$(ssh-agent -s)"
     #     echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
     #   env:
     #    SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Copy files to EC2
        run: |
          scp -o StrictHostKeyChecking=no -r * ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/app

      - name: Deploy on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          cd /home/ubuntu/app
          docker-compose down
          docker-compose up -d --build
          EOF
