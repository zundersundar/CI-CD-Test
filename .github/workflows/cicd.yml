name: Tower-Watch CI/CD Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  sanity-check:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.9.0'

      - name: Install NX CLI and dependencies
        run: |
          npm install -g nx
          npm install

      - name: Detect Changed Projects with NX
        id: nx-changes
        run: |
          CHANGED_PROJECTS=$(npx nx show projects --affected --base=origin/main)
          echo "CHANGED_PROJECTS=${CHANGED_PROJECTS}" >> $GITHUB_ENV
          echo "Changed Projects: ${CHANGED_PROJECTS}"

      - name: Run Sanity Checks for Changed Projects
        run: |
          for PROJECT in ${{ env.CHANGED_PROJECTS }}; do
            echo "Running sanity checks for $PROJECT"
            if [[ "$PROJECT" == "frontend" ]]; then
              cd frontend
              npm install
              npx eslint . || true
              npx prettier --check . || true
              cd ..
            else
              echo "Backend checks for $PROJECT"
              python -m pip install --upgrade pip
              pip install -r requirements.txt -r dev-requirements.txt
              pylint $PROJECT || true
              bandit -r $PROJECT || true
              pytest --cov=$PROJECT --cov-report=term-missing || true
            fi
          done

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: sanity-check

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Replace with your AWS region

      - name: Log in to Amazon ECR
        id: ecr-login
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URL }}
      
      - name: Build and Push Docker Images for Changed Modules
        run: |
          ECR_URL=${{ secrets.ECR_REPOSITORY_URL }}
          for PROJECT in ${{ env.CHANGED_PROJECTS }}; do
            echo "Building and pushing Docker image for $PROJECT"
            docker-compose build ${PROJECT}
            IMAGE_TAG=${ECR_URL}:${PROJECT}-${GITHUB_SHA}
            docker tag ${PROJECT}:latest ${IMAGE_TAG}
            docker push ${IMAGE_TAG}
          done

      - name: Deploy to Kubernetes for Changed Projects
        run: |
          for PROJECT in ${{ env.CHANGED_PROJECTS }}; do
            echo "Deploying $PROJECT to Kubernetes"
            kubectl apply -f ./k8s/${PROJECT}-deployment.yaml
            kubectl rollout status deployment/${PROJECT}
          done
