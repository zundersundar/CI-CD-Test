name: CI/CD Pipeline for React Frontend

on:
  push:
    paths:
      - './frontend/**'
  workflow_dispatch:

jobs:
  lint-and-test:
    name: Lint and Test React Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Dependencies
        working-directory: ./frontend
        run: npm install

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint || true

      - name: Run Prettier
        working-directory: ./frontend
        run: npm run prettier || true

  build-push-and-deploy:
    name: Build, Push Docker Image, and Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-account-id: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Build Docker Image
        working-directory: ./frontend
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.REPOSITORY_NAME }}:$IMAGE_TAG .

      - name: Push Docker Image to ECR
        run: |
          IMAGE_TAG=$(git rev-parse --short HEAD)
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.REPOSITORY_NAME }}:$IMAGE_TAG

      - name: Update Kubernetes Deployment
        env:
          IMAGE_TAG: $(git rev-parse --short HEAD)
          IMAGE_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.REPOSITORY_NAME }}:$IMAGE_TAG
        run: |
          kubectl set image deployment/${{ secrets.K8S_DEPLOYMENT_NAME }} \
          ${{ secrets.K8S_CONTAINER_NAME }}=$IMAGE_URI --namespace=${{ secrets.K8S_NAMESPACE }}
